import web3 from './web3client';

const contractAddress = '0xdD56E578c079532A04D879391596ac95751D7FBC';

const userByteCode =
  '60806040523480156200001157600080fd5b5060405162001073380380620010738339818101604052810190620000379190620002fd565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415620000d6576006819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200013a565b6006339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b846000908051906020019062000152929190620001c4565b5083600190805190602001906200016b929190620001c4565b50826002908051906020019062000184929190620001c4565b5081600390805190602001906200019d929190620001c4565b506000600460006101000a81548160ff0219169083151502179055505050505050620005a1565b828054620001d290620004ac565b90600052602060002090601f016020900481019282620001f6576000855562000242565b82601f106200021157805160ff191683800117855562000242565b8280016001018555821562000242579182015b828111156200024157825182559160200191906001019062000224565b5b50905062000251919062000255565b5090565b5b808211156200027057600081600090555060010162000256565b5090565b60006200028b62000285846200040c565b620003e3565b905082815260208101848484011115620002a457600080fd5b620002b184828562000476565b509392505050565b600081519050620002ca8162000587565b92915050565b600082601f830112620002e257600080fd5b8151620002f484826020860162000274565b91505092915050565b600080600080600060a086880312156200031657600080fd5b600086015167ffffffffffffffff8111156200033157600080fd5b6200033f88828901620002d0565b955050602086015167ffffffffffffffff8111156200035d57600080fd5b6200036b88828901620002d0565b945050604086015167ffffffffffffffff8111156200038957600080fd5b6200039788828901620002d0565b935050606086015167ffffffffffffffff811115620003b557600080fd5b620003c388828901620002d0565b9250506080620003d688828901620002b9565b9150509295509295909350565b6000620003ef62000402565b9050620003fd8282620004e2565b919050565b6000604051905090565b600067ffffffffffffffff8211156200042a576200042962000547565b5b620004358262000576565b9050602081019050919050565b60006200044f8262000456565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156200049657808201518184015260208101905062000479565b83811115620004a6576000848401525b50505050565b60006002820490506001821680620004c557607f821691505b60208210811415620004dc57620004db62000518565b5b50919050565b620004ed8262000576565b810181811067ffffffffffffffff821117156200050f576200050e62000547565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620005928162000442565b81146200059e57600080fd5b50565b610ac280620005b16000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063832880e714610051578063a6c4ec0e14610073578063bb0b6816146100a3578063d9091521146100ad575b600080fd5b6100596100dd565b60405161006a9594939291906107bf565b60405180910390f35b61008d600480360381019061008891906106ca565b61033d565b60405161009a91906107a4565b60405180910390f35b6100ab610423565b005b6100c760048036038101906100c291906106ca565b6105a9565b6040516100d491906107a4565b60405180910390f35b606080606080600080600160026003600460009054906101000a900460ff1684805461010890610959565b80601f016020809104026020016040519081016040528092919081815260200182805461013490610959565b80156101815780601f1061015657610100808354040283529160200191610181565b820191906000526020600020905b81548152906001019060200180831161016457829003601f168201915b5050505050945083805461019490610959565b80601f01602080910402602001604051908101604052809291908181526020018280546101c090610959565b801561020d5780601f106101e25761010080835404028352916020019161020d565b820191906000526020600020905b8154815290600101906020018083116101f057829003601f168201915b5050505050935082805461022090610959565b80601f016020809104026020016040519081016040528092919081815260200182805461024c90610959565b80156102995780601f1061026e57610100808354040283529160200191610299565b820191906000526020600020905b81548152906001019060200180831161027c57829003601f168201915b505050505092508180546102ac90610959565b80601f01602080910402602001604051908101604052809291908181526020018280546102d890610959565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b50505050509150945094509450945094509091929394565b600080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054118061041c575060066000815481106103c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541180610501575060066000815481106104a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610540576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105379061082e565b60405180910390fd5b6001600460006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f7599a0662fd3872f6a0151f1737178fc27bf764ddddba3cd4b520f35cdcc88a960405161059f9061084e565b60405180910390a2565b60006105b48261033d565b156105f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105eb9061086e565b60405180910390fd5b6006829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160068054905061066991906108aa565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060019050919050565b6000813590506106c481610a75565b92915050565b6000602082840312156106dc57600080fd5b60006106ea848285016106b5565b91505092915050565b6106fc816108f0565b82525050565b600061070d8261088e565b6107178185610899565b9350610727818560208601610926565b610730816109e9565b840191505092915050565b6000610748601383610899565b9150610753826109fa565b602082019050919050565b600061076b600f83610899565b915061077682610a23565b602082019050919050565b600061078e601483610899565b915061079982610a4c565b602082019050919050565b60006020820190506107b960008301846106f3565b92915050565b600060a08201905081810360008301526107d98188610702565b905081810360208301526107ed8187610702565b905081810360408301526108018186610702565b905081810360608301526108158185610702565b905061082460808301846106f3565b9695505050505050565b600060208201905081810360008301526108478161073b565b9050919050565b600060208201905081810360008301526108678161075e565b9050919050565b6000602082019050818103600083015261088781610781565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006108b58261091c565b91506108c08361091c565b9250828210156108d3576108d261098b565b5b828203905092915050565b60006108e9826108fc565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610944578082015181840152602081019050610929565b83811115610953576000848401525b50505050565b6000600282049050600182168061097157607f821691505b60208210811415610985576109846109ba565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f43616c6c6572206973206e6f74206f776e657200000000000000000000000000600082015250565b7f5573657220446f63205369676e65640000000000000000000000000000000000600082015250565b7f5573657220616c7265616479206578697374732e000000000000000000000000600082015250565b610a7e816108de565b8114610a8957600080fd5b5056fea264697066735822122025be96402367a2c497fc44dd69d7d8fef1a297bc5602db611bf7a8f835422c1164736f6c63430008040033';

const userABI = [
  {
    inputs: [
      {
        internalType: 'string',
        name: '_firstName',
        type: 'string',
      },
      {
        internalType: 'string',
        name: '_lastName',
        type: 'string',
      },
      {
        internalType: 'string',
        name: '_userName',
        type: 'string',
      },
      {
        internalType: 'string',
        name: '_signature',
        type: 'string',
      },
      {
        internalType: 'address',
        name: '_owner',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'string',
        name: 'resultMsg',
        type: 'string',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'signer',
        type: 'address',
      },
    ],
    name: 'onResult',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_userAddress',
        type: 'address',
      },
    ],
    name: 'addNewUserAddress',
    outputs: [
      {
        internalType: 'bool',
        name: 'success',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getUser',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_userAddress',
        type: 'address',
      },
    ],
    name: 'hasUser',
    outputs: [
      {
        internalType: 'bool',
        name: 'hasIndeed',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'signDocument',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const deployUserSmartContract = async pk => {
  const {address: from} = web3.eth.accounts.privateKeyToAccount(pk);
  let contract = new web3.eth.Contract(userABI);
  // deploy contract with constructor value
  console.log('here');
  const bytecodeWithEncodedParameters = contract
    .deploy({
      data: userByteCode,
      arguments: ['Kyaw', 'Kyaw', 'KK', 'signature', from],
    })
    .encodeABI();
  console.log('Deploying...');

  const nonce = await web3.eth.getTransactionCount(from);
  const gasPrice = await web3.eth.getGasPrice();
  const gasLimit = await web3.eth.estimateGas({
    data: bytecodeWithEncodedParameters,
  });
  console.log(gasLimit);

  const txObject = {
    nonce: web3.utils.toHex(nonce),
    gasLimit: web3.utils.toHex(gasLimit),
    gasPrice: web3.utils.toHex(gasPrice),
    data: `${bytecodeWithEncodedParameters}`,
    chainId: 2018,
  };

  const signedTx = await web3.eth.accounts.signTransaction(txObject, pk);

  const txReceipt = await web3.eth.sendSignedTransaction(
    signedTx.rawTransaction,
  );
  console.log('Contract Address:', txReceipt.contractAddress);
  console.log('Transaction Hash:', txReceipt.transactionHash);
  return txReceipt;
};

const getDeployedContract = contractAddress => {
  return new web3.eth.Contract(userABI, contractAddress);
};

const getUser = async userAddress => {
  const User = getDeployedContract(userAddress);
  const userInfo = await User.methods.getUser().call();
  console.log(userInfo);
};

const signDocument = async (userAddress, pk) => {
  const {address: from} = web3.eth.accounts.privateKeyToAccount(pk);
  console.log('Your User Contract Address ' + userAddress);
  const User = getDeployedContract(userAddress);
  let bytecodeWithEncodedParameters = await User.methods
    .signDocument()
    .encodeABI();
  const nonce = await web3.eth.getTransactionCount(from);
  const gasPrice = await web3.eth.getGasPrice();
  const gasLimit = await web3.eth.estimateGas({
    data: bytecodeWithEncodedParameters,
  });
  console.log('Gas Limit is ' + gasLimit);

  const txObject = {
    to: userAddress,
    nonce: web3.utils.toHex(nonce),
    gasLimit: web3.utils.toHex(gasLimit),
    gasPrice: web3.utils.toHex(gasPrice),
    data: `${bytecodeWithEncodedParameters}`,
    chainId: 2018,
  };

  const signedTx = await web3.eth.accounts.signTransaction(txObject, pk);

  const txReceipt = await web3.eth.sendSignedTransaction(
    signedTx.rawTransaction,
  );

  console.log('Transaction Hash:', txReceipt.transactionHash);
};

export {userABI, userByteCode};

export {deployUserSmartContract, signDocument, getUser};
export default new web3.eth.Contract(userABI, contractAddress);
